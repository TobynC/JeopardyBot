let tmi,nodeCache,lastWipe,checkAnswer,showCategories,showLeaderBoard,showQuestion,botName,oAuthToken,channelName,timeLimit,states,commands;_066‍.w("tmi.js",[["default",["tmi"],function(v){tmi=v}]]);_066‍.w("./state",[["nodeCache",["nodeCache"],function(v){nodeCache=v}],["lastWipe",["lastWipe"],function(v){lastWipe=v}]]);_066‍.w("./jeopardy",[["checkAnswer",["checkAnswer"],function(v){checkAnswer=v}],["showCategories",["showCategories"],function(v){showCategories=v}],["showLeaderBoard",["showLeaderBoard"],function(v){showLeaderBoard=v}],["showQuestion",["showQuestion"],function(v){showQuestion=v}]]);_066‍.w("./constants",[["botName",["botName"],function(v){botName=v}],["oAuthToken",["oAuthToken"],function(v){oAuthToken=v}],["channelName",["channelName"],function(v){channelName=v}],["timeLimit",["timeLimit"],function(v){timeLimit=v}],["states",["states"],function(v){states=v}],["commands",["commands"],function(v){commands=v}]]);




const options = {
	options: { debug: true, messagesLogLevel: "info" },
	connection: {
		reconnect: true,
		secure: true
	},
	identity: {
		username: botName,
		password: `oauth:${oAuthToken}`
	},
	channels: [ channelName ]
};

const client = new tmi.Client(options);

client.connect().catch(_066‍.g.console.error);

client.on('message', (channel, userState, message, self) => {
    if(self) return;
    //wipe scores after a week
    // const currentDate = new Date();

    // if(currentDate.getTime() > (lastWipe.getDate() + 7)) {
    //     userStates = [];
    //     lastWipe = currentDate;
    // }

    message = message.trim().toLowerCase();

    //register a user
    if(commands.includes(message.split(' ')[0]))
        registerUser(userState.username);

    if(message === '!money') {
        showMoney(client, channel, userState, self);
    }

    else if (message === '!weekly') {
        showLeaderBoard(client, channel, userState, self);
    }

    else if (message === '!jeopardy' && (nodeCache.get(userState.username).state === states.Registered || nodeCache.get(userState.username).state === states.AskedQuestion)) {
        client.say(channel, `@${userState.username} Loading categories, this might take some time...`)
        showCategories(client, channel, userState, self);
    }

    else if (message.startsWith('!category') && nodeCache.get(userState.username).state === states.AskedQuestion) {
        //remove command
        message = message.replace('!category', '').trim();

        //get responses from string
        const responses = message.split(' ');

        if (responses.length === 2 && responses.every(x => !isNaN(parseInt(x)))) {
            showQuestion(client, channel, userState, self, responses);
        }
        else
            client.say(channel, `invalid parameters ${responses.join(',')}`);
    }

    else if (message.startsWith('!whatis') && nodeCache.get(userState.username).state === states.SelectedCategory) {
        _066‍.g.console.log('what is was called by', userState.username);
        //remove command
        message = message.replace('!whatis', '').trim();

        checkAnswer(client, channel, userState, self, message);
    }
});

function registerUser(username) {
    const user = nodeCache.get(username);

    if(user === undefined) {
        nodeCache.set(username, {
            username: username,
            state: states.Registered,
            money: 0
        });
    }
}