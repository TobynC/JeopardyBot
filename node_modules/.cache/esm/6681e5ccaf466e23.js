let jeopardyApiUrl,states,axios;_af4‍.x([["showLeaderboard",()=>showLeaderboard],["showCategories",()=>showCategories],["showQuestion",()=>showQuestion],["checkAnswer",()=>checkAnswer]]);_af4‍.w("./constants",[["jeopardyApiUrl",["jeopardyApiUrl"],function(v){jeopardyApiUrl=v}],["states",["states"],function(v){states=v}]]);_af4‍.w("axios",[["default",["axios"],function(v){axios=v}]]);


       function showLeaderboard(client, channel, userState, self) {

}

       function showCategories(client, channel, userState, self, date, userStates = []) { 
    userStates.push({
        user: userState.username,
        state: states.AskedQuestion,
        jeopardyDay: date
    });


    // axios.get(`${jeopardyApiUrl}/${date}`).then(response => {
    //     //normalize value for double jeopardy
    //     for(const question of response.data["double jeopardy"]) 
    //         question.value = question.value >> 1;
        
    //     let questions = [...response.data.jeopardy, ...response.data["double jeopardy"]]

    //     console.log(questions);
    // }).catch(error => console.log(error));
}

       function showQuestion(client, channel, userState, self) {

}

       function checkAnswer(client, channel, userState, self) {

}