let tmi,checkAnswer,showCategories,showLeaderboard,showQuestion,botName,oAuthToken,channelName,startDate,timeLimit;_af2‍.w("tmi.js",[["default",["tmi"],function(v){tmi=v}]]);_af2‍.w("./jeopardy",[["checkAnswer",["checkAnswer"],function(v){checkAnswer=v}],["showCategories",["showCategories"],function(v){showCategories=v}],["showLeaderboard",["showLeaderboard"],function(v){showLeaderboard=v}],["showQuestion",["showQuestion"],function(v){showQuestion=v}]]);_af2‍.w("./constants",[["botName",["botName"],function(v){botName=v}],["oAuthToken",["oAuthToken"],function(v){oAuthToken=v}],["channelName",["channelName"],function(v){channelName=v}],["startDate",["startDate"],function(v){startDate=v}],["timeLimit",["timeLimit"],function(v){timeLimit=v}]]);



//state variables
const userStates = [];
let lastWipe = Date.now();

const randomDay = randomWeekday();            

showCategories({date: randomDay, userStates: userStates});

// const options = {
// 	options: { debug: true, messagesLogLevel: "info" },
// 	connection: {
// 		reconnect: true,
// 		secure: true
// 	},
// 	identity: {
// 		username: botName,
// 		password: `oauth:${oAuthToken}`
// 	},
// 	channels: [ channelName ]
// };

// const client = new tmi.Client(options);

// client.connect().catch(console.error);

// client.on('message', (channel, userState, message, self) => {
// 	if(self) return;

//     switch(message.trim().toLowerCase()) {
//         case '!weekly':
//             showLeaderboard(client, channel, userState, self);
//             break;
//         case '!jeopardy':
//             const randomDay = randomWeekday();            

//             showCategories(client, channel, userState, self, randomDay, userStates);

//             break;
//         case '!category':
//             showQuestion(client, channel, userState, self);
//             break;
//         case '!whatis':
//             checkAnswer(client, channel, userState, self);
//             break;
//     }

// 	// if(message.toLowerCase() === '!hello') {
// 	// 	client.say(channel, `@${userstate.username}, heya!`);
// 	// }
// });

function randomWeekday() {
    const start = new Date(startDate);

    let weekday = new Date(start.getTime() + Math.random() * (Date.now() - start.getTime()));

    while(weekday.getDay() === 0 || weekday.getDay() === 6)
        weekday = new Date(start.getTime() + Math.random() * (Date.now() - start.getTime()));

    return weekday.toLocaleString('en-US', {
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
    }).split(',')[0];
}